// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:
    // demux address to each RAM4K selection
    DMux8Way(in = load, sel = address[11..13], a = sel0, b = sel1, c = sel2, d = sel3, e = sel4, f = sel5, g = sel6, h = sel7);

    // extract each RAM4K load operation
    And(a = sel0, b = load, out = load0);
    And(a = sel1, b = load, out = load1);
    And(a = sel2, b = load, out = load2);
    And(a = sel3, b = load, out = load3);
    And(a = sel4, b = load, out = load4);
    And(a = sel5, b = load, out = load5);
    And(a = sel6, b = load, out = load6);
    And(a = sel7, b = load, out = load7);

    RAM4K(in = in, load = load0, address = address[0..11], out = out0);
    RAM4K(in = in, load = load1, address = address[0..11], out = out1);
    RAM4K(in = in, load = load2, address = address[0..11], out = out2);
    RAM4K(in = in, load = load3, address = address[0..11], out = out3);
    RAM4K(in = in, load = load4, address = address[0..11], out = out4);
    RAM4K(in = in, load = load5, address = address[0..11], out = out5);
    RAM4K(in = in, load = load6, address = address[0..11], out = out6);
    RAM4K(in = in, load = load7, address = address[0..11], out = out7);

    // select which RAM4K to output
    Mux8Way16(a = out0, b = out1, c = out2, d = out3, e = out4, f = out5, g = out6, h = out7,
              sel = address[11..13], out = out);
}
